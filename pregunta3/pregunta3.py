{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOzQjSi8oRHwCRINBwh9VnV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 3)Del dataset del punto 1 realice en PYTHON, cinco algoritmos de preprocesamiento; dos de ellos deben ser onehotencoder y otro escalado. Explique por cada uno la razón de su uso."],"metadata":{"id":"ZlvhbgrcSy6_"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zCMLbWPYSdEf","executionInfo":{"status":"ok","timestamp":1718210003862,"user_tz":240,"elapsed":27847,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"f160e27f-63ec-4a98-b1ba-35f6e30e67ef"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Cargar el dataset\n","file_path = '/content/drive/My Drive/primerParcial354/Pokemon.csv'\n","data = pd.read_csv(file_path)\n","\n","# Verificar los nombres de las columnas\n","print(data.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mqM9F3TpSqgj","executionInfo":{"status":"ok","timestamp":1718210547358,"user_tz":240,"elapsed":378,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"da76770e-6ed4-45a9-8609-70f865a54798"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['number', 'name', 'type1', 'type2', 'total', 'hp', 'attack', 'defense',\n","       'sp_attack', 'sp_defense', 'speed', 'generation', 'legendary'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.impute import SimpleImputer\n","\n","# Cargar el dataset\n","file_path = '/content/drive/My Drive/primerParcial354/Pokemon.csv'\n","pokemon_df = data\n","\n","# Crear listas de columnas numéricas y categóricas\n","numeric_features = ['total', 'hp', 'attack', 'defense', 'sp_attack', 'sp_defense', 'speed']\n","categorical_features = ['type1', 'type2']\n","\n","# Imputar valores faltantes en características numéricas con la media\n","numeric_imputer = SimpleImputer(strategy='mean')\n","pokemon_df[numeric_features] = numeric_imputer.fit_transform(pokemon_df[numeric_features])\n","\n","# Imputar valores faltantes en características categóricas con la moda\n","categorical_imputer = SimpleImputer(strategy='most_frequent')\n","pokemon_df[categorical_features] = categorical_imputer.fit_transform(pokemon_df[categorical_features])\n","\n","# Mostrar una muestra de los datos preprocesados\n","print(pokemon_df.head())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fW_bTUBDTDGV","executionInfo":{"status":"ok","timestamp":1718211125393,"user_tz":240,"elapsed":431,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"96ac2776-05dc-4855-afa5-f9c8b919c99b"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["   number                 name  type1   type2  total    hp  attack  defense  \\\n","0       1            Bulbasaur  Grass  Poison  318.0  45.0    49.0     49.0   \n","1       2              Ivysaur  Grass  Poison  405.0  60.0    62.0     63.0   \n","2       3             Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","3       3        Mega Venusaur  Grass  Poison  625.0  80.0   100.0    123.0   \n","4       3  Gigantamax Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","\n","   sp_attack  sp_defense  speed  generation  legendary  total_scaled  \\\n","0       65.0        65.0   45.0           1      False     -1.012881   \n","1       80.0        80.0   60.0           1      False     -0.295784   \n","2      100.0       100.0   80.0           1      False      0.693316   \n","3      122.0       120.0   80.0           1      False      1.517565   \n","4      100.0       100.0   80.0           1      False      0.693316   \n","\n","   type1_encoded  \n","0           11.0  \n","1           11.0  \n","2           11.0  \n","3           11.0  \n","4           11.0  \n"]}]},{"cell_type":"markdown","source":["# Pre procesamiento 2 OneHotEncoder para variables categóricas"],"metadata":{"id":"mRA8Uq-WUATP"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# Cargar el dataset\n","file_path = 'path_to_your_file/Pokemon.csv'\n","pokemon_df =data\n","\n","# Crear lista de columnas categóricas incluyendo 'legendary'\n","categorical_features = ['type1', 'type2', 'legendary']\n","\n","# Codificación OneHotEncoder de características categóricas\n","onehotencoder = OneHotEncoder(sparse=False, handle_unknown='ignore')\n","encoded_categorical = onehotencoder.fit_transform(pokemon_df[categorical_features])\n","\n","# Convertir la salida codificada en DataFrame\n","encoded_categorical_df = pd.DataFrame(encoded_categorical, columns=onehotencoder.get_feature_names_out(categorical_features))\n","\n","# Combinar las características numéricas con las características categóricas codificadas\n","pokemon_df_processed = pd.concat([pokemon_df.drop(columns=categorical_features), encoded_categorical_df], axis=1)\n","\n","# Mostrar una muestra de los datos preprocesados\n","print(pokemon_df_processed.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LSaOpxmYT9RG","executionInfo":{"status":"ok","timestamp":1718211128792,"user_tz":240,"elapsed":328,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"ffcfbe63-47f8-43c4-8652-cc07b34a8ab0"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["   number                 name  total    hp  attack  defense  sp_attack  \\\n","0       1            Bulbasaur  318.0  45.0    49.0     49.0       65.0   \n","1       2              Ivysaur  405.0  60.0    62.0     63.0       80.0   \n","2       3             Venusaur  525.0  80.0    82.0     83.0      100.0   \n","3       3        Mega Venusaur  625.0  80.0   100.0    123.0      122.0   \n","4       3  Gigantamax Venusaur  525.0  80.0    82.0     83.0      100.0   \n","\n","   sp_defense  speed  generation  ...  type2_Ground  type2_Ice  type2_Normal  \\\n","0        65.0   45.0           1  ...           0.0        0.0           0.0   \n","1        80.0   60.0           1  ...           0.0        0.0           0.0   \n","2       100.0   80.0           1  ...           0.0        0.0           0.0   \n","3       120.0   80.0           1  ...           0.0        0.0           0.0   \n","4       100.0   80.0           1  ...           0.0        0.0           0.0   \n","\n","   type2_Poison  type2_Psychic  type2_Rock  type2_Steel  type2_Water  \\\n","0           1.0            0.0         0.0          0.0          0.0   \n","1           1.0            0.0         0.0          0.0          0.0   \n","2           1.0            0.0         0.0          0.0          0.0   \n","3           1.0            0.0         0.0          0.0          0.0   \n","4           1.0            0.0         0.0          0.0          0.0   \n","\n","   legendary_False  legendary_True  \n","0              1.0             0.0  \n","1              1.0             0.0  \n","2              1.0             0.0  \n","3              1.0             0.0  \n","4              1.0             0.0  \n","\n","[5 rows x 52 columns]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["# Pre procesamiento 3 Escalado"],"metadata":{"id":"OfTYtN7rVTH3"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","pokemon_df = data\n","\n","# Escalado de la columna 'total'\n","scaler = StandardScaler()\n","pokemon_df['total_scaled'] = scaler.fit_transform(pokemon_df[['total']])\n","\n","# Mostrar una muestra de los datos preprocesados\n","print(pokemon_df.head())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"57au9yntVRaR","executionInfo":{"status":"ok","timestamp":1718211135046,"user_tz":240,"elapsed":431,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"3a9637b4-447a-4a12-bdd2-f925a02028df"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["   number                 name  type1   type2  total    hp  attack  defense  \\\n","0       1            Bulbasaur  Grass  Poison  318.0  45.0    49.0     49.0   \n","1       2              Ivysaur  Grass  Poison  405.0  60.0    62.0     63.0   \n","2       3             Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","3       3        Mega Venusaur  Grass  Poison  625.0  80.0   100.0    123.0   \n","4       3  Gigantamax Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","\n","   sp_attack  sp_defense  speed  generation  legendary  total_scaled  \\\n","0       65.0        65.0   45.0           1      False     -1.012881   \n","1       80.0        80.0   60.0           1      False     -0.295784   \n","2      100.0       100.0   80.0           1      False      0.693316   \n","3      122.0       120.0   80.0           1      False      1.517565   \n","4      100.0       100.0   80.0           1      False      0.693316   \n","\n","   type1_encoded  \n","0           11.0  \n","1           11.0  \n","2           11.0  \n","3           11.0  \n","4           11.0  \n"]}]},{"cell_type":"markdown","source":["# Pre procesamiento 4 Label Encoding"],"metadata":{"id":"PZvj52KHV4ak"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Cargar el dataset\n","file_path = 'path_to_your_file/Pokemon.csv'\n","pokemon_df = data\n","\n","# Aplicar Label Encoding en la columna 'type1'\n","label_encoder = LabelEncoder()\n","pokemon_df['type1_encoded'] = label_encoder.fit_transform(pokemon_df['type1'])\n","\n","# Mostrar una muestra de los datos preprocesados\n","print(pokemon_df.head())\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yRGtt6LoV3u9","executionInfo":{"status":"ok","timestamp":1718211142576,"user_tz":240,"elapsed":408,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"84727e8f-c28e-479d-fc1f-80e8046e6c0d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["   number                 name  type1   type2  total    hp  attack  defense  \\\n","0       1            Bulbasaur  Grass  Poison  318.0  45.0    49.0     49.0   \n","1       2              Ivysaur  Grass  Poison  405.0  60.0    62.0     63.0   \n","2       3             Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","3       3        Mega Venusaur  Grass  Poison  625.0  80.0   100.0    123.0   \n","4       3  Gigantamax Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","\n","   sp_attack  sp_defense  speed  generation  legendary  total_scaled  \\\n","0       65.0        65.0   45.0           1      False     -1.012881   \n","1       80.0        80.0   60.0           1      False     -0.295784   \n","2      100.0       100.0   80.0           1      False      0.693316   \n","3      122.0       120.0   80.0           1      False      1.517565   \n","4      100.0       100.0   80.0           1      False      0.693316   \n","\n","   type1_encoded  \n","0             11  \n","1             11  \n","2             11  \n","3             11  \n","4             11  \n"]}]},{"cell_type":"markdown","source":["# Pre procesamiento 5 OrdinalEncoder"],"metadata":{"id":"-nuLqesBWVWn"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import OrdinalEncoder\n","\n","# Cargar el dataset\n","file_path = 'path_to_your_file/Pokemon.csv'\n","pokemon_df = data\n","\n","# Aplicar OrdinalEncoder en la columna 'type1'\n","ordinal_encoder = OrdinalEncoder()\n","pokemon_df['type1_encoded'] = ordinal_encoder.fit_transform(pokemon_df[['type1']])\n","\n","# Mostrar una muestra de los datos preprocesados\n","print(pokemon_df.head())\n","\n","# Guardar los datos preprocesados (opcional)\n","pokemon_df.to_csv('/content/drive/My Drive/primerParcial354/2PreprocesadoPokemon.csv', index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CDNc9ap_WU0N","executionInfo":{"status":"ok","timestamp":1718211153748,"user_tz":240,"elapsed":349,"user":{"displayName":"Williams Rodrigo Surco Nina","userId":"06491161336963034792"}},"outputId":"b886d199-0df3-4178-af0e-75bb14eb6b09"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["   number                 name  type1   type2  total    hp  attack  defense  \\\n","0       1            Bulbasaur  Grass  Poison  318.0  45.0    49.0     49.0   \n","1       2              Ivysaur  Grass  Poison  405.0  60.0    62.0     63.0   \n","2       3             Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","3       3        Mega Venusaur  Grass  Poison  625.0  80.0   100.0    123.0   \n","4       3  Gigantamax Venusaur  Grass  Poison  525.0  80.0    82.0     83.0   \n","\n","   sp_attack  sp_defense  speed  generation  legendary  total_scaled  \\\n","0       65.0        65.0   45.0           1      False     -1.012881   \n","1       80.0        80.0   60.0           1      False     -0.295784   \n","2      100.0       100.0   80.0           1      False      0.693316   \n","3      122.0       120.0   80.0           1      False      1.517565   \n","4      100.0       100.0   80.0           1      False      0.693316   \n","\n","   type1_encoded  \n","0           11.0  \n","1           11.0  \n","2           11.0  \n","3           11.0  \n","4           11.0  \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"DPDKuwARVzaH"},"execution_count":null,"outputs":[]}]}